{"version":3,"sources":["serviceWorker.js","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","DeckShuffler","props","handleOptionChange","changeEvent","setState","selectedOption","target","value","orig_deck","suits","values","ordinal_num","si","length","vi","console","log","push","shuffled_deck","slice","shuffle","state","seed","deck","handleSeedChange","bind","handleShuffle","event","this","player_num","deck_str","deck_array","player_cards","clubs","diamonds","hearts","spades","i","sort_by_key","clubs_res","diamonds_res","hearts_res","spades_res","printDeck","className","type","id","onChange","name","checked","onClick","React","Component","array","key","sort","a","b","x","y","rng","require","seedrandom","temporaryValue","randomIndex","currentIndex","Math","floor","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.7dffcf6a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nclass DeckShuffler extends React.Component {\n  constructor(props) {\n    super(props);\n      var orig_deck = [];\n      var suits = ['Clubs', 'Diamonds', 'Hearts', 'Spades']\n      var values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King', 'Ace']\n      var ordinal_num = 1\n      for (var si = 0; si < suits.length; si++) {\n          for (var vi = 0; vi < values.length; vi++) {\n              console.log({'ordinal_num': ordinal_num,\n                  'suit': suits[si], 'value': values[vi]})\n              orig_deck.push({'ordinal_num': ordinal_num,\n                  'suit': suits[si], 'value': values[vi]})\n              ordinal_num += 1\n          }\n      }\n      console.log(\"ADAM ORIG DECK \" + orig_deck)\n      var shuffled_deck = orig_deck.slice()\n      var seed = 777;\n      shuffled_deck = shuffle(shuffled_deck, seed);\n    this.state = {\n      seed: seed,\n      orig_deck: orig_deck,\n      deck: shuffled_deck,\n      selectedOption: \"option1\",\n    };\n\n    this.handleSeedChange = this.handleSeedChange.bind(this);\n    this.handleShuffle = this.handleShuffle.bind(this);\n  }\n\n  handleSeedChange(event) {\n    this.setState({seed: event.target.value});\n  }\n\n  handleShuffle(event) {\n    const orig_deck = this.state.orig_deck.slice();\n    const shuffled_deck = shuffle(this.state.orig_deck, this.state.seed);\n\n    this.setState({\n        orig_deck: orig_deck,\n        deck: shuffled_deck\n    })\n  }\n\n handleOptionChange = changeEvent => {\n  this.setState({\n    selectedOption: changeEvent.target.value\n  });\n};\n\n  render() {\n    var player_num;\n    if (this.state.selectedOption === \"option1\") {\n        player_num = 1;\n    } else if (this.state.selectedOption === \"option2\") {\n        player_num = 2;\n    } else if (this.state.selectedOption === \"option3\") {\n        player_num = 3;\n    } else if (this.state.selectedOption === \"option4\") {\n        player_num = 4;\n    }\n    const deck_str = printDeck(this.state.deck, player_num);\n    // For Debug\n    // const deck_str1 = printDeck(this.state.deck, 1);\n    // const deck_str2 = printDeck(this.state.deck, 2);\n    // const deck_str3 = printDeck(this.state.deck, 3);\n    // const deck_str4 = printDeck(this.state.deck, 4);\n    return(\n    <div className=\"deck_shuffler\">\n      <h1>Card Deck Shuffler</h1>\n      <p>Seed: </p>\n      <input type=\"text\" id=\"seed_input\"\n        value={this.state.seed}\n        onChange={this.handleSeedChange}\n      ></input>\n\n        <form>\n\n      <p>Player Number: </p>\n  <div className=\"form-check\">\n    <label>\n      <input\n        type=\"radio\"\n        name=\"react-tips\"\n        value=\"option1\"\n        checked={this.state.selectedOption === \"option1\"}\n        onChange={this.handleOptionChange}\n        className=\"form-check-input\"\n      />\n      Player 1\n    </label>\n  </div>\n\n  <div className=\"form-check\">\n    <label>\n      <input\n        type=\"radio\"\n        name=\"react-tips\"\n        value=\"option2\"\n        checked={this.state.selectedOption === \"option2\"}\n        onChange={this.handleOptionChange}\n        className=\"form-check-input\"\n      />\n      Player 2\n    </label>\n  </div>\n\n  <div className=\"form-check\">\n    <label>\n      <input\n        type=\"radio\"\n        name=\"react-tips\"\n        value=\"option3\"\n        checked={this.state.selectedOption === \"option3\"}\n        onChange={this.handleOptionChange}\n        className=\"form-check-input\"\n      />\n      Player 3\n    </label>\n  </div>\n\n  <div className=\"form-check\">\n    <label>\n      <input\n        type=\"radio\"\n        name=\"react-tips\"\n        value=\"option4\"\n        checked={this.state.selectedOption === \"option4\"}\n        onChange={this.handleOptionChange}\n        className=\"form-check-input\"\n      />\n      Player 4\n    </label>\n  </div>\n\n</form>\n\n      <br></br>\n      <button onClick={this.handleShuffle}>\n        Shuffle\n      </button>\n      <br></br>\n      <p>Deck results Player {player_num}:</p>\n      <p>Clubs: {deck_str[0]}</p>\n      <p>Diamonds: {deck_str[1]}</p>\n      <p>Hearts: {deck_str[2]}</p>\n      <p>Spades: {deck_str[3]}</p>\n        {/*\n      <br></br>\n      <p>Deck results Player 1:</p>\n      <p>Clubs: {deck_str1[0]}</p>\n      <p>Diamonds: {deck_str1[1]}</p>\n      <p>Hearts: {deck_str1[2]}</p>\n      <p>Spades: {deck_str1[3]}</p>\n      <br></br>\n      <p>Deck results Player 2:</p>\n      <p>Clubs: {deck_str2[0]}</p>\n      <p>Diamonds: {deck_str2[1]}</p>\n      <p>Hearts: {deck_str2[2]}</p>\n      <p>Spades: {deck_str2[3]}</p>\n      <br></br>\n      <p>Deck results Player 3:</p>\n      <p>Clubs: {deck_str3[0]}</p>\n      <p>Diamonds: {deck_str3[1]}</p>\n      <p>Hearts: {deck_str3[2]}</p>\n      <p>Spades: {deck_str3[3]}</p>\n      <br></br>\n      <p>Deck results Player 4:</p>\n      <p>Clubs: {deck_str4[0]}</p>\n      <p>Diamonds: {deck_str4[1]}</p>\n      <p>Hearts: {deck_str4[2]}</p>\n      <p>Spades: {deck_str4[3]}</p>\n      */}\n    </div>\n    );\n  }\n\n}\n\nfunction sort_by_key(array, key)\n{\n return array.sort(function(a, b)\n {\n  var x = a[key]; var y = b[key];\n  return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n });\n}\n\nfunction printDeck(deck_array, player_num) {\n  var player_cards;\n  if (player_num === 1){\n    player_cards = deck_array.slice(0, 13);\n  } else if (player_num === 2){\n    player_cards = deck_array.slice(13, 26);\n  } else if (player_num === 3){\n    player_cards = deck_array.slice(26, 39);\n  } else if (player_num === 4){ \n    player_cards = deck_array.slice(39, 52);\n  }\n  var clubs = [];\n  var diamonds = [];\n  var hearts = [];\n  var spades = [];\n  for (var i = 0; i < player_cards.length; i++){\n    if (player_cards[i]['suit'] === 'Clubs') {\n        clubs.push(player_cards[i])\n    } else if (player_cards[i]['suit'] === 'Diamonds') {\n        diamonds.push(player_cards[i])\n    } else if (player_cards[i]['suit'] === 'Hearts') {\n        hearts.push(player_cards[i])\n    } else if (player_cards[i]['suit'] === 'Spades') {\n        spades.push(player_cards[i])\n    } else {\n        console.log('Error, bad suit')\n    }\n  }\n  clubs = sort_by_key(clubs, 'ordinal_num');\n  diamonds = sort_by_key(diamonds, 'ordinal_num');\n  hearts = sort_by_key(hearts, 'ordinal_num');\n  spades = sort_by_key(spades, 'ordinal_num');\n\n  var clubs_res = ''\n  for (i = 0; i < clubs.length; i ++) {\n    clubs_res += ' ' + clubs[i]['value'];\n  }\n\n  var diamonds_res = '';\n  for (i = 0; i < diamonds.length; i ++) {\n    diamonds_res += ' ' + diamonds[i]['value'];\n  }\n\n  var hearts_res = '';\n  for (i = 0; i < hearts.length; i ++) {\n    hearts_res += ' ' + hearts[i]['value'];\n  }\n\n  var spades_res = '';\n  for (i = 0; i < spades.length; i ++) {\n    spades_res += ' ' + spades[i]['value'];\n  }\n    \n\n  return [clubs_res, diamonds_res, hearts_res, spades_res]\n}\n\n\nfunction shuffle(array, seed) {\n  console.log('ADAM DECK BEFORE ', array)\n  var seedrandom = require('seedrandom');\n  var rng = seedrandom(seed);\n  console.log(rng());\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(rng() * currentIndex);\n    // randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  console.log('ADAM DECK AFTER', array)\n\n  return array;\n}\n\n// ========================================\n\nReactDOM.render(\n  <DeckShuffler />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}