{"version":3,"sources":["serviceWorker.js","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","DeckShuffler","props","handleOptionChange","changeEvent","setState","next_selected_player","target","value","orig_deck","suits","values","ordinal_num","si","length","vi","push","shuffled_deck","slice","shuffle","state","seed","shuffled_seed","deck","selected_player","handleSeedChange","bind","handleShuffle","event","this","player_num","deck_str","deck_array","player_cards","clubs","diamonds","hearts","spades","i","console","log","sort_by_key","clubs_res","diamonds_res","hearts_res","spades_res","printDeck","className","type","checked","onChange","id","onClick","style","React","Component","array","key","sort","a","b","x","y","temporaryValue","randomIndex","rng","require","seedrandom","currentIndex","Math","floor","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.bbeb3a7d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nclass DeckShuffler extends React.Component {\n  constructor(props) {\n    super(props);\n    var orig_deck = [];\n    var suits = ['Clubs', 'Diamonds', 'Hearts', 'Spades']\n    var values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King', 'Ace']\n    var ordinal_num = 1\n    for (var si = 0; si < suits.length; si++) {\n      for (var vi = 0; vi < values.length; vi++) {\n        orig_deck.push({\n          'ordinal_num': ordinal_num,\n          'suit': suits[si], 'value': values[vi]\n        })\n        ordinal_num += 1\n      }\n    }\n    var shuffled_deck = orig_deck.slice()\n    var seed = 777;\n    shuffled_deck = shuffle(shuffled_deck, seed);\n    this.state = {\n      seed: seed,\n      shuffled_seed: seed,\n      orig_deck: orig_deck,\n      deck: shuffled_deck,\n      selected_player: 'player1',\n      next_selected_player: 'player1',\n    };\n\n    this.handleSeedChange = this.handleSeedChange.bind(this);\n    this.handleShuffle = this.handleShuffle.bind(this);\n  }\n\n  handleSeedChange(event) {\n    this.setState({ seed: event.target.value });\n  }\n\n  handleShuffle(event) {\n    const orig_deck = this.state.orig_deck.slice();\n    const shuffled_deck = shuffle(this.state.orig_deck, this.state.seed);\n\n    this.setState({\n      orig_deck: orig_deck,\n      deck: shuffled_deck,\n      shuffled_seed: this.state.seed,\n      selected_player: this.state.next_selected_player,\n    })\n  }\n\n  handleOptionChange = changeEvent => {\n    this.setState({\n      next_selected_player: changeEvent.target.value\n    });\n  };\n\n  render() {\n    var player_num;\n    switch (this.state.selected_player) {\n      case 'player1':\n        player_num = 1;\n        break;\n      case 'player2':\n        player_num = 2;\n        break;\n      case 'player3':\n        player_num = 3;\n        break;\n      case 'player4':\n        player_num = 4;\n        break;\n      default:\n        break\n    }\n    const deck_str = printDeck(this.state.deck, player_num);\n    // For Debug\n    // const deck_str1 = printDeck(this.state.deck, 1);\n    // const deck_str2 = printDeck(this.state.deck, 2);\n    // const deck_str3 = printDeck(this.state.deck, 3);\n    // const deck_str4 = printDeck(this.state.deck, 4);\n    return (\n      <div className='deck_shuffler'>\n        <h1>Card Deck Shuffler</h1>\n        <p>\n          A random card deck shuffler, useful to help set up 4 player card games.\n          Especially useful when players are remote from one another.\n        </p>\n        <h2>Instructions:</h2>\n        <p>\n          Gather a group of 4 remote players, each with a deck of cards and this webpage open.\n          Assign each person a player number and have everyone select their individual player number on this page.\n          Pick a \"Seed\" for the game. This can be any string of characters and is used to create a random\n          shuffle of the cards. Every player must enter in the same seed. Then click the \"Shuffle\" button\n          and each player will see their particular set of cards for the game. When you want to play another game,\n          simply pick a new \"Seed\" and click \"Shuffle\" again. Best played with a trustworthy group,\n          since this simple website does not prevent \"peaking\" at other hands.\n        </p>\n\n        <form>\n          <p><b>Player Number:</b></p>\n          <div className='form-check'>\n            <label>\n              <input\n                type='radio'\n                value='player1'\n                checked={this.state.next_selected_player === 'player1'}\n                onChange={this.handleOptionChange}\n                className='form-check-input'\n              />\n      Player 1\n    </label>\n          </div>\n\n          <div className='form-check'>\n            <label>\n              <input\n                type='radio'\n                value='player2'\n                checked={this.state.next_selected_player === 'player2'}\n                onChange={this.handleOptionChange}\n                className='form-check-input'\n              />\n      Player 2\n    </label>\n          </div>\n\n          <div className='form-check'>\n            <label>\n              <input\n                type='radio'\n                value='player3'\n                checked={this.state.next_selected_player === 'player3'}\n                onChange={this.handleOptionChange}\n                className='form-check-input'\n              />\n      Player 3\n    </label>\n          </div>\n\n          <div className='form-check'>\n            <label>\n              <input\n                type='radio'\n                value='player4'\n                checked={this.state.next_selected_player === 'player4'}\n                onChange={this.handleOptionChange}\n                className='form-check-input'\n              />\n      Player 4\n    </label>\n          </div>\n\n        </form>\n\n        <p><b>Seed:</b></p>\n        <input type='text' id='seed_input'\n          value={this.state.seed}\n          onChange={this.handleSeedChange}\n        ></input>\n\n\n        <p></p>\n        <button onClick={this.handleShuffle}>\n          Shuffle\n        </button>\n\n        <h2>Shuffled Results:</h2>\n        <p>Using Seed: {this.state.shuffled_seed}</p>\n\n        <p><b>Hand for Player {player_num}:</b></p>\n        <p><b>&#9827;</b> <b>Clubs:</b></p>\n        <p>{deck_str[0]}</p>\n        <p><b style={{ 'color': 'red' }}>&#9830;</b> <b>Diamonds:</b></p>\n        <p>{deck_str[1]}</p>\n        <p><b style={{ 'color': 'red' }}>&#9829;</b> <b>Hearts:</b></p>\n        <p>{deck_str[2]}</p>\n        <p><b>&#9824;</b> <b>Spades:</b></p>\n        <p>{deck_str[3]}</p>\n        {/*\n      <br></br>\n      <p>Deck results Player 1:</p>\n      <p>Clubs: {deck_str1[0]}</p>\n      <p>Diamonds: {deck_str1[1]}</p>\n      <p>Hearts: {deck_str1[2]}</p>\n      <p>Spades: {deck_str1[3]}</p>\n      <br></br>\n      <p>Deck results Player 2:</p>\n      <p>Clubs: {deck_str2[0]}</p>\n      <p>Diamonds: {deck_str2[1]}</p>\n      <p>Hearts: {deck_str2[2]}</p>\n      <p>Spades: {deck_str2[3]}</p>\n      <br></br>\n      <p>Deck results Player 3:</p>\n      <p>Clubs: {deck_str3[0]}</p>\n      <p>Diamonds: {deck_str3[1]}</p>\n      <p>Hearts: {deck_str3[2]}</p>\n      <p>Spades: {deck_str3[3]}</p>\n      <br></br>\n      <p>Deck results Player 4:</p>\n      <p>Clubs: {deck_str4[0]}</p>\n      <p>Diamonds: {deck_str4[1]}</p>\n      <p>Hearts: {deck_str4[2]}</p>\n      <p>Spades: {deck_str4[3]}</p>\n      */}\n      </div>\n    );\n  }\n\n}\n\nfunction sort_by_key(array, key) {\n  return array.sort(function (a, b) {\n    var x = a[key]; var y = b[key];\n    return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n  });\n}\n\nfunction printDeck(deck_array, player_num) {\n  var player_cards;\n  if (player_num === 1) {\n    player_cards = deck_array.slice(0, 13);\n  } else if (player_num === 2) {\n    player_cards = deck_array.slice(13, 26);\n  } else if (player_num === 3) {\n    player_cards = deck_array.slice(26, 39);\n  } else if (player_num === 4) {\n    player_cards = deck_array.slice(39, 52);\n  }\n  var clubs = [];\n  var diamonds = [];\n  var hearts = [];\n  var spades = [];\n  for (var i = 0; i < player_cards.length; i++) {\n    if (player_cards[i]['suit'] === 'Clubs') {\n      clubs.push(player_cards[i])\n    } else if (player_cards[i]['suit'] === 'Diamonds') {\n      diamonds.push(player_cards[i])\n    } else if (player_cards[i]['suit'] === 'Hearts') {\n      hearts.push(player_cards[i])\n    } else if (player_cards[i]['suit'] === 'Spades') {\n      spades.push(player_cards[i])\n    } else {\n      console.log('Error, bad suit')\n    }\n  }\n  clubs = sort_by_key(clubs, 'ordinal_num');\n  diamonds = sort_by_key(diamonds, 'ordinal_num');\n  hearts = sort_by_key(hearts, 'ordinal_num');\n  spades = sort_by_key(spades, 'ordinal_num');\n\n  var clubs_res = ''\n  for (i = 0; i < clubs.length; i++) {\n    clubs_res += ' ' + clubs[i]['value'];\n  }\n\n  var diamonds_res = '';\n  for (i = 0; i < diamonds.length; i++) {\n    diamonds_res += ' ' + diamonds[i]['value'];\n  }\n\n  var hearts_res = '';\n  for (i = 0; i < hearts.length; i++) {\n    hearts_res += ' ' + hearts[i]['value'];\n  }\n\n  var spades_res = '';\n  for (i = 0; i < spades.length; i++) {\n    spades_res += ' ' + spades[i]['value'];\n  }\n\n\n  return [clubs_res, diamonds_res, hearts_res, spades_res]\n}\n\n\nfunction shuffle(array, seed) {\n  // From: https://stackoverflow.com/a/2450976/11919380\n  var seedrandom = require('seedrandom');\n  var rng = seedrandom(seed);\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(rng() * currentIndex);\n    // randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n}\n\n// ========================================\n\nReactDOM.render(\n  <DeckShuffler />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}